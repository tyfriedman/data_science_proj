# -*- coding: utf-8 -*-
"""Decision_Tree_Mariam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Saz225FKQjM1AilXc68hA-Tm9DZetweF

#Libraries
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn import tree
import matplotlib.pyplot as plt

"""#Cohort 1"""

#Loading cohort 1 file
df = pd.read_csv('cohort1.csv')  # Replace with your actual file

# Separate features and target: whether the class is dropped
X = df.drop('dropped_after_test_1', axis=1)
y = df['dropped_after_test_1']

# Split data into training and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train decision tree
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predict and evaluate
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

#Visualize the decision tree
plt.figure(figsize=(12, 8))
tree.plot_tree(clf, feature_names=X.columns, class_names=["Stayed", "Dropped"], filled=True)
plt.show()

# Get feature importances
importances = clf.feature_importances_
feature_names = X.columns

# Create a DataFrame for better visualization
feat_imp_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feat_imp_df = feat_imp_df.sort_values(by='Importance', ascending=False)

# Print the table
print(feat_imp_df)

# Optional: Plot the importances
plt.figure(figsize=(10, 6))
plt.barh(feat_imp_df['Feature'], feat_imp_df['Importance'], color='skyblue')
plt.gca().invert_yaxis()  # Most important on top
plt.title('Feature Importance in Decision Tree')
plt.xlabel('Importance Score')
plt.show()

"""Understanding: Early attendance is key in predicting in whether a student will drop a course in terms of both attending office hours, and being a part of session 1.

#Cohort 2
"""

#Loading cohort 2 file
df = pd.read_csv('cohort2.csv')  # Replace with your actual file

# Separate features and target: whether the class is dropped
X = df.drop('dropped_after_test_2', axis=1)
y = df['dropped_after_test_2']

# Split data into training and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train decision tree
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predict and evaluate
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

#Visualize the decision tree
plt.figure(figsize=(12, 8))
tree.plot_tree(clf, feature_names=X.columns, class_names=["Stayed", "Dropped"], filled=True)
plt.show()

# Get feature importances
importances = clf.feature_importances_
feature_names = X.columns

# Create a DataFrame for better visualization
feat_imp_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feat_imp_df = feat_imp_df.sort_values(by='Importance', ascending=False)

# Print the table
print(feat_imp_df)

# Optional: Plot the importances
plt.figure(figsize=(10, 6))
plt.barh(feat_imp_df['Feature'], feat_imp_df['Importance'], color='skyblue')
plt.gca().invert_yaxis()  # Most important on top
plt.title('Feature Importance in Decision Tree')
plt.xlabel('Importance Score')
plt.show()

"""Understanding: By cohort 2 we see a big change in that attendance in classes or office hours isn't the key point of staying in the class. Rather, posting questions in the forum and having it be answered is the highest indicator of a student dropping after a class. This may indicate that students who were previously struggling already and didn't receive the help the 1 on 1 support they needed ended up dropping.

#Cohort 3
"""

#Loading cohort 3 file
df = pd.read_csv('cohort3.csv')  # Replace with your actual file

# Separate features and target: whether the class is dropped
X = df.drop('dropped_after_test_3', axis=1)
y = df['dropped_after_test_3']

# Split data into training and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train decision tree
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predict and evaluate
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

#Visualize the decision tree
plt.figure(figsize=(12, 8))
tree.plot_tree(clf, feature_names=X.columns, class_names=["Stayed", "Dropped"], filled=True)
plt.show()

# Get feature importances
importances = clf.feature_importances_
feature_names = X.columns

# Create a DataFrame for better visualization
feat_imp_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feat_imp_df = feat_imp_df.sort_values(by='Importance', ascending=False)

# Print the table
print(feat_imp_df)

# Optional: Plot the importances
plt.figure(figsize=(10, 6))
plt.barh(feat_imp_df['Feature'], feat_imp_df['Importance'], color='skyblue')
plt.gca().invert_yaxis()  # Most important on top
plt.title('Feature Importance in Decision Tree')
plt.xlabel('Importance Score')
plt.show()

"""Understanding: By cohort 3, we see attendance in sessions is not as important a factor in predicting drop out rates compared to participation in office ours and having questions answered in the forum.

#Cohort 4
"""

#Loading cohort 4 file
df = pd.read_csv('cohort4.csv')  # Replace with your actual file

# Separate features and target: whether the class is dropped
X = df.drop('final_dropout', axis=1)
y = df['final_dropout']

# Split data into training and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train decision tree
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predict and evaluate
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

#Visualize the decision tree
plt.figure(figsize=(12, 8))
tree.plot_tree(clf, feature_names=X.columns, class_names=["Stayed", "Dropped"], filled=True)
plt.show()

# Get feature importances
importances = clf.feature_importances_
feature_names = X.columns

# Create a DataFrame for better visualization
feat_imp_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feat_imp_df = feat_imp_df.sort_values(by='Importance', ascending=False)

# Print the table
print(feat_imp_df)

# Optional: Plot the importances
plt.figure(figsize=(10, 6))
plt.barh(feat_imp_df['Feature'], feat_imp_df['Importance'], color='skyblue')
plt.gca().invert_yaxis()  # Most important on top
plt.title('Feature Importance in Decision Tree')
plt.xlabel('Importance Score')
plt.show()

"""Understanding: This shows that office hour visits were a key indicator of drop out rates. Overall, after cohort 1 session 1 attendance, the overall trend was that 1 on 1 indicators like office hours and forum and question answers were key indicators of drop out rates which means in understanding how to lower drop out rates, it would make sense for an emphasis to be placed on office hours.  """